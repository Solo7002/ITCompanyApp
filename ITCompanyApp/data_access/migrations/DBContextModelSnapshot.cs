// <auto-generated />
using ITCompanyApp.Helpers.DBClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace ITCompanyApp.data_access.migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("ITCompanyApp.Models.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessLevelId"));

                    b.Property<int>("AccessLevelMark")
                        .HasColumnType("int");

                    b.Property<string>("AccessLevelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AccessLevelId");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentHeadId")
                        .IsUnique()
                        .HasFilter("[DepartmentHeadId] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ITCompanyApp.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackId"));

                    b.Property<int?>("EmployeeForId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeFromId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedBackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedBackMark")
                        .HasColumnType("int");

                    b.Property<string>("FeedBackText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FeedBackId");

                    b.HasIndex("EmployeeForId");

                    b.HasIndex("EmployeeFromId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("DeadLineProjectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartProjectDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeadLineDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeFor_Id")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeFromId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeFrom_Id")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("EmployeeFor_Id");

                    b.HasIndex("EmployeeFromId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ITCompanyApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AccessLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCompanyApp.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITCompanyApp.Models.Department", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Employee", "Manager")
                        .WithOne()
                        .HasForeignKey("ITCompanyApp.Models.Department", "DepartmentHeadId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Employee", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITCompanyApp.Models.Job", "Job")
                        .WithMany("Employee")
                        .HasForeignKey("JobId");

                    b.Navigation("Department");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ITCompanyApp.Models.FeedBack", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Employee", "EmployeeFor")
                        .WithMany("FeedBacksFor")
                        .HasForeignKey("EmployeeForId");

                    b.HasOne("ITCompanyApp.Models.Employee", "EmployeeFrom")
                        .WithMany("FeedBacksFrom")
                        .HasForeignKey("EmployeeFromId");

                    b.Navigation("EmployeeFor");

                    b.Navigation("EmployeeFrom");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Project", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Employee", "EmployeeProjectHead")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeProjectHead");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Task", b =>
                {
                    b.HasOne("ITCompanyApp.Models.Employee", "EmployeeFor")
                        .WithMany("TasksFor")
                        .HasForeignKey("EmployeeFor_Id");

                    b.HasOne("ITCompanyApp.Models.Employee", "EmployeeFrom")
                        .WithMany("TasksFrom")
                        .HasForeignKey("EmployeeFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCompanyApp.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("EmployeeFor");

                    b.Navigation("EmployeeFrom");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ITCompanyApp.Models.User", b =>
                {
                    b.HasOne("ITCompanyApp.Models.AccessLevel", "AccessLevel")
                        .WithMany("Users")
                        .HasForeignKey("AccessLevelId");

                    b.HasOne("ITCompanyApp.Models.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("ITCompanyApp.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ITCompanyApp.Models.AccessLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Employee", b =>
                {
                    b.Navigation("FeedBacksFor");

                    b.Navigation("FeedBacksFrom");

                    b.Navigation("TasksFor");

                    b.Navigation("TasksFrom");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("ITCompanyApp.Models.Job", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ITCompanyApp.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
